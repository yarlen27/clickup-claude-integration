name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20'

jobs:
  # .NET API Build and Test
  dotnet-ci:
    name: .NET API CI
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Cache .NET packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build solution
      run: dotnet build --no-restore --configuration Release
    
    - name: Run tests
      run: dotnet test --no-build --configuration Release --verbosity normal
    
    - name: Check code formatting
      run: dotnet format --verify-no-changes --verbosity diagnostic

  # Node.js MCP Server Build and Test  
  nodejs-ci:
    name: Node.js MCP Server CI
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: src/mcp-server/package-lock.json
    
    - name: Install dependencies
      run: |
        cd src/mcp-server
        npm ci
    
    - name: TypeScript build
      run: |
        cd src/mcp-server
        npm run build
    
    - name: Run tests
      run: |
        cd src/mcp-server  
        npm test
    
    - name: Check TypeScript types
      run: |
        cd src/mcp-server
        npx tsc --noEmit

  # Docker Build Test
  docker-ci:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [dotnet-ci, nodejs-ci]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build .NET API Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: src/ClickUp.Web.API/Dockerfile
        push: false
        tags: clickup-api:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build MCP Server Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: src/mcp-server/Dockerfile
        push: false
        tags: clickup-mcp-server:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build Redis Docker image
      uses: docker/build-push-action@v6
      with:
        context: redis
        file: redis/Dockerfile
        push: false
        tags: clickup-redis:test

  # Security and Code Quality
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run .NET Security Scan
      uses: securecodewarrior/github-action-dotnet-security@v1
      continue-on-error: true
    
    - name: Run Node.js Security Audit
      run: |
        cd src/mcp-server
        npm audit --audit-level moderate
      continue-on-error: true
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'